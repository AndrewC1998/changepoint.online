{
    "contents" : "penalty_decision = function(penalty, pen.value, n, diffparam, asymcheck, method){\n  \n  \n  if((penalty==\"SIC0\") || (penalty==\"BIC0\")){\n    pen.return=diffparam*log(n)\n  }\n  else if((penalty==\"SIC\") || (penalty==\"BIC\")){\n    pen.return=(diffparam+1)*log(n)\n  }\n  else if(penalty==\"MBIC\"){\n    pen.return=(diffparam+2)*log(n)\n  }\n  else if((penalty==\"SIC1\") || (penalty==\"BIC1\")){\n    stop(\"SIC1 and BIC1 have been depreciated, use SIC or BIC for the same result.\")\n  }\n  else if(penalty==\"AIC0\"){\n    pen.return=2*diffparam\n  }\n  else if(penalty==\"AIC\"){\n    pen.return=2*(diffparam+1)\n  }\n  else if(penalty==\"AIC1\"){\n    stop(\"AIC1 has been depreciated, use AIC for the same result.\")\n  }\n  else if(penalty==\"Hannan-Quinn0\"){\n    pen.return=2*diffparam*log(log(n))\n  }\n  else if(penalty==\"Hannan-Quinn\"){\n    pen.return=2*(diffparam+1)*log(log(n))\n  }\n  else if(penalty==\"Hannan-Quinn1\"){\n    stop(\"Hannan-Quinn1 has been depreciated, use Hannan-Quinn for the same result.\")\n  }\n  else if(penalty==\"None\"){\n    pen.return=0\n  }\n  else if((penalty!=\"Manual\")&&(penalty!=\"Asymptotic\")){\n    stop('Unknown Penalty')\n  }\n  if((penalty==\"Manual\")&&(is.numeric(pen.value)==FALSE)){\n    pen.value=try(eval(parse(text=paste(pen.value))),silent=TRUE)\n    if(class(pen.value)=='try-error'){\n      stop('Your manual penalty cannot be evaluated')\n    }else{\n      pen.return=pen.value\n    }\n  }\n  \n  if((penalty==\"Manual\")&&(is.numeric(pen.value)==TRUE)){\n    pen.return=pen.value\n  }\n  \n  \n  if(penalty==\"Asymptotic\"){\n    if((pen.value <= 0) || (pen.value > 1)){\n      stop('Asymptotic penalty values must be > 0 and <= 1')\n    }\n    if(method != \"AMOC\"){\n      warning('Asymptotic penalty value is not accurate for multiple changes, it should be treated the same as a manual penalty choice.')\n    }\n    if(asymcheck == \"mean.norm\"){\n      alpha=pen.value\n      alogn=(2*log(log(n)))^(-(1/2))\n      blogn=(alogn^(-1))+(1/2)*alogn*log(log(log(n)))\n      pen.return=(-alogn*log(log((1-alpha+exp(-2*(pi^(1/2))*exp(blogn/alogn)))^(-1/(2*(pi^(1/2))))))+blogn)^2\n    }else if(asymcheck == \"var.norm\"){ \n      alpha=pen.value\n      alogn=sqrt(2*log(log(n)))\n      blogn=2*log(log(n))+ (log(log(log(n))))/2 - log(gamma(1/2))\n      pen.return=(-(log(log((1-alpha+exp(-2*exp(blogn)))^(-1/2))))/alogn + blogn/alogn)^2\n    }else if(asymcheck == \"meanvar.norm\"){\n      alpha=pen.value\n      alogn=sqrt(2*log(log(n)))\n      blogn=2*log(log(n))+ log(log(log(n)))\n      pen.return=(-(log(log((1-alpha+exp(-2*exp(blogn)))^(-1/2))))/alogn + blogn/alogn)^2\n    }else if(asymcheck == \"reg.norm\"){\n      alpha=pen.value\n      top=-(log(log((1 - alpha + exp(-2*exp(2*(log(log(n)))+(diffparam/2)*(log(log(log(n))))- log(gamma(diffparam/2)))))^(-1/2))))  +  2*(log(log(n)))+(diffparam/2)*(log(log(log(n))))- log(gamma(diffparam/2))\n      bottom=(2*log(log(n)))^(1/2)\n      pen.return=(top/bottom)^2\n    }else if(asymcheck == \"var.css\"){\n      if(pen.value==0.01){pen.return=1.628}\n      else if(pen.value==0.05){pen.return=1.358}\n      else if(pen.value==0.1){pen.return=1.224}\n      else if(pen.value==0.25){pen.return=1.019}\n      else if(pen.value==0.5){pen.return=0.828}\n      else if(pen.value==0.75){pen.return=0.677}\n      else if(pen.value==0.9){pen.return=0.571}\n      else if(pen.value==0.95){pen.return=0.520}\n      else{stop('Only alpha values of 0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95 are valid for CSS')}\n    }else if(asymcheck == \"mean.cusum\"){\n      stop('Asymptotic penalties have not been implemented yet for CUSUM')\n    }else if(asymcheck == \"meanvar.gamma\"){\n      stop('Asymptotic penalties for the Gamma test statistic are not defined, please choose an alternative penalty type')\n    }else if(asymcheck == \"meanvar.exp\"){\n      alpha=pen.value\n      an=(2*log(log(n)))^(1/2)\n      bn=2*log(log(n))+(1/2)*log(log(log(n)))-(1/2)*log(pi)\n      pen.return=(-1/an)*log(-0.5*log(1-alpha))+bn\n      if(alpha==1){pen.return=1.42417} # value of 1 gives log(0), this is alpha=0.99999999999999993\n    }else if(asymcheck == \"meanvar.poisson\"){\n      stop('Asymptotic penalties for the Poisson test statistic are not available yet, please choose an alternative penalty type')\n    }\n  }\n#if(method==\"AMOC\"){\n#  pen.return=pen.value\n#}\n  if(pen.return < 0){\n    stop('pen.value cannot be negative, please change your penalty value')\n  }else{\n    return(pen.return)\n  }\n}\n\n\n",
    "created" : 1458558511699.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2023967879",
    "id" : "B0ED8012",
    "lastKnownWriteTime" : 1445948041,
    "path" : "~/Dropbox/Becki-Matt/changepoint.online/R/penalty_decision-COPY from cpt as not exported.R",
    "project_path" : "R/penalty_decision-COPY from cpt as not exported.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}