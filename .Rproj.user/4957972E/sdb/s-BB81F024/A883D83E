{
    "contents" : "class_input <- function(data, cpttype, method, test.stat, penalty, pen.value, minseglen, param.estimates, out=list(), Q=NA, shape=NA){\n  if(method==\"BinSeg\" || method==\"SegNeigh\" || penalty==\"CROPS\"){\n    ans=new(\"cpt.range\")\n  }else{\n    ans=new(\"cpt\")\n  }\n  \n  data.set(ans)=data;cpttype(ans)=cpttype;method(ans)=method; test.stat(ans)=test.stat;pen.type(ans)=penalty;pen.value(ans)=pen.value;minseglen(ans)=minseglen;\n  if(penalty!=\"CROPS\"){ # crops is only one that doesn't give a single set of cpts\n    cpts(ans)=out[[2]]\n    \n    if(param.estimates==TRUE){\n      if(test.stat == \"Gamma\"){\n      ans=param(ans, shape)\n      }else{\n      ans=param(ans)\n      }\n    }\n  }\n  \n  if(method==\"PELT\"){\n      ncpts.max(ans)=Inf\n  }\n  else if(method==\"AMOC\"){\n    ncpts.max(ans)=1\n  }\n  else{\n    ncpts.max(ans)=Q\n  }\n  \n  if(method==\"BinSeg\"){\n    l=list()\n    for(i in 1:(length(out$cps)/2)){\n      l[[i]] = out$cps[1,1:i] \n    }\n    m = t(sapply(l, '[', 1:max(sapply(l, length))))\n    \n    cpts.full(ans)=m\n    pen.value.full(ans)=out$cps[2,]\n  }else if(method==\"SegNeigh\"){\n    cpts.full(ans)=out$cps[-1,]\n    pen.value.full(ans)=-diff(out$like.Q)\n  }else if(penalty==\"CROPS\"){\n    m = t(sapply(out[[2]], '[', 1:max(sapply(out[[2]], length))))\n    \n    cpts.full(ans) = m\n    pen.value.full(ans) = out[[1]][1,]\n    if(test.stat==\"Gamma\"){param.est(ans)$shape=shape}\n  }\n  \n  return(ans)\n}",
    "created" : 1458558499697.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "170586737",
    "id" : "A883D83E",
    "lastKnownWriteTime" : 1445641897,
    "path" : "~/Dropbox/Becki-Matt/changepoint.online/R/class_input-COPY from cpt as not exported.R",
    "project_path" : "R/class_input-COPY from cpt as not exported.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}