{
    "contents" : "PELT.online.initialise=function(data,pen=0, cost_func = \"norm.mean\", shape = 1, minseglen = 1,lastchangelike, lastchangecpts, numchangecpts,checklist){\n  # function that uses the PELT method to calculate changes in mean where the segments in the data are assumed to be Normal\n  # initialisation function for online use\n\n  # assumes dyn.load('PELTonline.so') has already been done\n  ndone=0\n  nupdate=length(data)\n  y2=c(0,cumsum((data)^2))\n  y=c(0,cumsum(data))\n\n  if(missing(lastchangelike)) {lastchangelike = array(0,dim = nupdate+1)}\n  if(missing(lastchangecpts)) {lastchangecpts = array(0,dim = nupdate+1)}\n  if(missing(numchangecpts)) {numchangecpts = array(0,dim = nupdate+1)}\n  if(missing(checklist)) {checklist = array(0,dim = nupdate+1)}\n  \n  cptsout=rep(0,ndone+nupdate+1) # sets up null vector for changepoint answer\n  storage.mode(cptsout)='integer'\n\n  answer=list()\n  answer[[6]]=1\n  on.exit(.C(\"FreePELT\",answer[[6]]))\n  \n  storage.mode(lastchangelike) = 'double'\n  storage.mode(lastchangecpts) = 'integer'\n  storage.mode(numchangecpts) = 'integer'\n  storage.mode(checklist) = 'integer'\n\n  error=0\n\n  # 1=ndone,2=y2,3=y,4=nupdate,5=pen,6=lastchangecpts,7=lastchangelike,8=checklist,9=nchecklist,10=cptsout,11=error\n  answer=.C('PELT_online',cost_func, sumstat,as.integer(ndone),as.integer(nupdate),as.double(pen),cptsout,as.integer(error),as.double(shape), as.integer(minseglen), lastchangelike, lastchangecpts,checklist,nchecklist,numchangecpts)\n  \n  if(answer[[6]]>0){\n    stop(\"C code error:\",answer[[6]],call.=F)\n  }\n\n  answer=.C('PELT_mean_norm_update',as.integer(ndone),y2,y,as.integer(nupdate),as.double(penalty),lastchangecpts,lastchangelike,checklist,as.integer(0),cptsout,as.integer(error))\n\n  names(answer)=c('ndone','y2','y','nupdate','penalty','last cpts','last like','checklist','nchecklist','cpts','error')\n  return(answer)\n}\n\n\n\nPELT.online.update=function(previousanswer,newdata){\n  # function that uses the PELT method to calculate changes in mean where the segments in the data are assumed to be Normal\n  # update function for online use\n  # previous answer is of the format spat out by PELT.mean.norm.initialise\n  # new data is a numerical vector of length 1 or more\n\n  # assumes dyn.load('PELTonline.so') has already been done\n  \n  ndone=previousanswer[[1]]+previousanswer[[4]]\n  nupdate=length(newdata)\n  y2=c(previousanswer[[2]],rep(previousanswer[[2]][ndone+1],nupdate)) + c(rep(0,ndone+1),cumsum((newdata)^2))\n  y=c(previousanswer[[3]],rep(previousanswer[[3]][ndone+1],nupdate))+ c(rep(0,ndone+1),cumsum(newdata))\n\n  storage.mode(y2)='double'\n  storage.mode(y)='double'\n  cptsout=rep(0,ndone+nupdate+1) # sets up null vector for changepoint answer\n  storage.mode(cptsout)='integer'\n  \n  lastchangecpts=rbind(previousanswer[[6]],matrix(0,ncol=2,nrow=nupdate))\n  storage.mode(lastchangecpts)='integer'\n  \n  lastchangelike=c(previousanswer[[7]],rep(0,nupdate))\n  storage.mode(lastchangelike)='double'\n  \n  checklist=c(previousanswer[[8]][1:previousanswer[[9]]],rep(0,nupdate))\n  storage.mode(checklist)='integer'\n  \n  error=0\n  answer=list()\n  answer[[11]]=1\n  on.exit(.C(\"FreePELT\",answer[[11]]))\n  # 1=ndone,2=y2,3=y,4=nupdate,5=pen,6=lastchangecpts,7=lastchangelike,8=checklist,9=nchecklist,10=cptsout,11=error\n  answer=.C('PELT_mean_norm_update',as.integer(ndone),y2,y,as.integer(nupdate),as.double(previousanswer[[5]]),lastchangecpts,lastchangelike,checklist,as.integer(previousanswer[[9]]),cptsout,as.integer(error))\n  if(answer[[11]]>0){\n    print(\"C code error:\",answer[[11]])\n    stop(call.=F)\n  }\n  names(answer)=c('ndone','y2','y','nupdate','penalty','last cpts','last like','checklist','nchecklist','cpts','error')\n  return(answer)\n}\n",
    "created" : 1458558515124.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1476794077",
    "id" : "F441A233",
    "lastKnownWriteTime" : 1458563148,
    "path" : "~/Dropbox/Becki-Matt/changepoint.online/R/wrapper.R",
    "project_path" : "R/wrapper.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}